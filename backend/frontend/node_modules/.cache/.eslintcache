[{"C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\index.js":"1","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\store.js":"2","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\App.js":"4","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\reducers\\productReducer.js":"5","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\components\\Header.js":"6","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\components\\Footer.js":"7","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\reducers\\cartReducers.js":"8","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\reducers\\userReducers.js":"9","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\reducers\\orderReducers.js":"10","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\ProductScreen.js":"11","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\HomePage.js":"12","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\RegisterScreen.js":"13","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\ProfileScreen.js":"14","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\CartScreen.js":"15","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\LoginScreen.js":"16","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\ShippingScreen.js":"17","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\PaymentScreen.js":"18","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\PlaceOrderScreen.js":"19","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\OrderScreen.js":"20","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\UserListScreen.js":"21","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\UserEditScreen.js":"22","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\ProductListScreen.js":"23","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\ProductEditScreen.js":"24","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\OrderListScreen.js":"25","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\components\\SearchBox.js":"26","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\constants\\productConstants.js":"27","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\constants\\orderConstants.js":"28","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\constants\\cartConstants.js":"29","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\constants\\userConstants.js":"30","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\actions\\userActions.js":"31","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\components\\Message.js":"32","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\components\\Rating.js":"33","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\components\\Product.js":"34","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\components\\Loader.js":"35","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\components\\Paginate.js":"36","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\actions\\productActions.js":"37","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\components\\FormContainer.js":"38","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\actions\\cartActions.js":"39","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\actions\\orderActions.js":"40","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\components\\CheckoutSteps.js":"41"},{"size":631,"mtime":1677694340158,"results":"42","hashOfConfig":"43"},{"size":2389,"mtime":1678551540685,"results":"44","hashOfConfig":"43"},{"size":362,"mtime":1677441728368,"results":"45","hashOfConfig":"43"},{"size":2427,"mtime":1678628753654,"results":"46","hashOfConfig":"43"},{"size":3604,"mtime":1678617217408,"results":"47","hashOfConfig":"43"},{"size":3177,"mtime":1678559517375,"results":"48","hashOfConfig":"43"},{"size":425,"mtime":1678011854942,"results":"49","hashOfConfig":"43"},{"size":1500,"mtime":1678215356435,"results":"50","hashOfConfig":"43"},{"size":4208,"mtime":1678312355490,"results":"51","hashOfConfig":"43"},{"size":4049,"mtime":1678529889162,"results":"52","hashOfConfig":"43"},{"size":10602,"mtime":1678551835174,"results":"53","hashOfConfig":"43"},{"size":1373,"mtime":1678624642422,"results":"54","hashOfConfig":"43"},{"size":3575,"mtime":1678012305320,"results":"55","hashOfConfig":"43"},{"size":6667,"mtime":1678529295467,"results":"56","hashOfConfig":"43"},{"size":4479,"mtime":1678126115958,"results":"57","hashOfConfig":"43"},{"size":2450,"mtime":1678030270065,"results":"58","hashOfConfig":"43"},{"size":3095,"mtime":1678212716569,"results":"59","hashOfConfig":"43"},{"size":2682,"mtime":1678212619334,"results":"60","hashOfConfig":"43"},{"size":6045,"mtime":1678214998811,"results":"61","hashOfConfig":"43"},{"size":7071,"mtime":1678538352531,"results":"62","hashOfConfig":"43"},{"size":3350,"mtime":1678402046510,"results":"63","hashOfConfig":"43"},{"size":3434,"mtime":1678313320482,"results":"64","hashOfConfig":"43"},{"size":5178,"mtime":1678625412952,"results":"65","hashOfConfig":"43"},{"size":6856,"mtime":1678474770089,"results":"66","hashOfConfig":"43"},{"size":3277,"mtime":1678531131153,"results":"67","hashOfConfig":"43"},{"size":890,"mtime":1678623240711,"results":"68","hashOfConfig":"43"},{"size":1372,"mtime":1678545031323,"results":"69","hashOfConfig":"43"},{"size":1308,"mtime":1678529800176,"results":"70","hashOfConfig":"43"},{"size":296,"mtime":1678215159636,"results":"71","hashOfConfig":"43"},{"size":1516,"mtime":1678312193466,"results":"72","hashOfConfig":"43"},{"size":6123,"mtime":1678356719159,"results":"73","hashOfConfig":"43"},{"size":222,"mtime":1677702556979,"results":"74","hashOfConfig":"43"},{"size":1865,"mtime":1678546560400,"results":"75","hashOfConfig":"43"},{"size":1066,"mtime":1678546658588,"results":"76","hashOfConfig":"43"},{"size":329,"mtime":1677701767094,"results":"77","hashOfConfig":"43"},{"size":738,"mtime":1678625125100,"results":"78","hashOfConfig":"43"},{"size":5306,"mtime":1678616784728,"results":"79","hashOfConfig":"43"},{"size":433,"mtime":1677965457660,"results":"80","hashOfConfig":"43"},{"size":1328,"mtime":1678122817543,"results":"81","hashOfConfig":"43"},{"size":5917,"mtime":1678532539916,"results":"82","hashOfConfig":"43"},{"size":1472,"mtime":1678134109933,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wzlmsf",{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"118"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166"},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212"},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222"},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\index.js",[],[],"C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\store.js",[],[],"C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\reportWebVitals.js",[],[],"C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\App.js",[],[],"C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\reducers\\productReducer.js",[],[],"C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\components\\Header.js",["226","227"],[],"import React from 'react';\r\nimport '../index.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {logout} from '../actions/userActions'\r\nimport SearchBox from '../components/SearchBox'\r\n\r\n\r\nfunction Header() {\r\n\tconst cart = useSelector(state => state.cart)\r\n    const {cartItems} = cart\r\n\r\n\tconst userLogin = useSelector(state => state.userLogin)\r\n\tconst { userInfo } = userLogin\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst logoutHandler = () =>{\r\n\t\tdispatch(logout())\r\n\t\tlocalStorage.clear()\r\n\t}\r\n\r\n\treturn (\r\n\t\t<header className=\"text-xl\">\r\n\t\t\t<Navbar bg='dark' variant='dark' expand='lg' collapseOnSelect>\r\n\t\t\t\t<Container fluid >\r\n                    <LinkContainer to='/'>\r\n\t\t\t\t\t    <Navbar.Brand className=\"hover:text-amber-400 hover:font-bold\" href='/'>PikeShop</Navbar.Brand>\r\n                    </LinkContainer>\r\n\t\t\t\t\t<Navbar.Toggle aria-controls='navbarScroll' />\r\n\t\t\t\t\t<Navbar.Collapse id='navbarScroll'>\r\n\t\t\t\t\t\t<SearchBox />\r\n\t\t\t\t\t\t<Nav\r\n\t\t\t\t\t\t\tclassName='my-2 my-lg-0 ms-auto p-1'\r\n\t\t\t\t\t\t\tnavbarScroll>\r\n                            <LinkContainer to='/cart'>\r\n                                <Nav.Link className=\"hover:text-amber-400\"><i class=\"fa-solid fa-cart-shopping\"></i> Koszyk {cartItems.length > 0 ? <span>({cartItems.reduce((acc, item) =>acc + item.qty, 0)})</span> : null}\r\n                                </Nav.Link>\r\n                            </LinkContainer>\r\n\r\n\t\t\t\t\t\t\t{userInfo && userInfo.isAdmin && (\r\n\t\t\t\t\t\t\t\t<NavDropdown title={`Panel Admina`} id='adminmenu' className=\"pr-5\">\r\n\t\t\t\t\t\t\t\t\t<LinkContainer to='/admin/userlist'>\r\n\t\t\t\t\t\t\t\t\t\t<NavDropdown.Item>Użytkownicy</NavDropdown.Item>\r\n\t\t\t\t\t\t\t\t\t</LinkContainer>\r\n\t\t\t\t\t\t\t\t\t<LinkContainer to='/admin/productlist'>\r\n\t\t\t\t\t\t\t\t\t\t<NavDropdown.Item>Przedmioty</NavDropdown.Item>\r\n\t\t\t\t\t\t\t\t\t</LinkContainer>\r\n\t\t\t\t\t\t\t\t\t<LinkContainer to='/admin/orderlist'>\r\n\t\t\t\t\t\t\t\t\t\t<NavDropdown.Item>Zamówienia</NavDropdown.Item>\r\n\t\t\t\t\t\t\t\t\t</LinkContainer>\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t</NavDropdown>\r\n\t\t\t\t\t\t\t)}\r\n\r\n\r\n\t\t\t\t\t\t\t{userInfo ? (\r\n\t\t\t\t\t\t\t\t<NavDropdown title={`Witaj ${userInfo.name} !`} id='username' className=\"pr-5\">\r\n\t\t\t\t\t\t\t\t\t<LinkContainer to='/profile'>\r\n\t\t\t\t\t\t\t\t\t\t<NavDropdown.Item className=\"hover:text-amber-400\"><i class=\"fa-solid fa-address-card\"></i> Mój profil</NavDropdown.Item>\r\n\t\t\t\t\t\t\t\t\t</LinkContainer>\r\n\t\t\t\t\t\t\t\t\t<NavDropdown.Item onClick={logoutHandler} className=\"hover:text-amber-400\"><i class=\"fa-solid fa-right-from-bracket\"></i> Wyloguj się</NavDropdown.Item>\r\n\t\t\t\t\t\t\t\t</NavDropdown>\r\n\t\t\t\t\t\t\t): (\r\n\t\t\t\t\t\t\t\t\t<LinkContainer to='/login'>\r\n\t\t\t\t\t\t\t\t\t\t<Nav.Link className=\"hover:text-amber-400\"><i class=\"fa-solid fa-right-to-bracket\"></i> Logowanie</\tNav.Link>\r\n\t\t\t\t\t\t\t\t\t</LinkContainer>\r\n\t\t\t\t\t\t\t\t)\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\r\n\r\n\t\t\t\t\t\t</Nav>\r\n\t\t\t\t\t</Navbar.Collapse>\r\n\t\t\t\t</Container>\r\n\t\t\t</Navbar>\r\n\t\t</header>\r\n\t);\r\n}\r\n\r\nexport default Header;\r\n","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\components\\Footer.js",[],[],"C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\reducers\\cartReducers.js",[],[],"C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\reducers\\userReducers.js",[],[],"C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\reducers\\orderReducers.js",[],[],"C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\ProductScreen.js",["228","229","230","231","232","233"],[],"import React, {useState, useEffect} from 'react'\r\nimport { Link, useParams, useHistory, useLocation, useNavigate } from 'react-router-dom'\r\nimport { Row, Col, Image, ListGroup, Button, Card, Form } from 'react-bootstrap'\r\nimport Rating from '../components/Rating'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {listProductDetails, createProductReview} from '../actions/productActions'\r\nimport {PRODUCT_CREATE_RESET, PRODUCT_CREATE_REVIEW_RESET} from '../constants/productConstants'\r\n\r\n\r\nfunction ProductScreen() {\r\n    const {id} = useParams()\r\n    const navigate = useNavigate();\r\n\r\n\r\n    const [qty, setQty] = useState(1)\r\n\r\n    const [rating, setRating] = useState(0)\r\n    const [comment, setComment] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const productDetails = useSelector(state => state.productDetails)\r\n    const {loading, error, product} = productDetails\r\n\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const {userInfo} = userLogin\r\n\r\n    const ProductReviewCreate = useSelector(state => state.ProductReviewCreate)\r\n    const {loading: loadingProductReview, error: errorProductReview, success: successProductReview} = ProductReviewCreate\r\n\r\n\r\n\tuseEffect(()=>{\r\n        if(successProductReview){\r\n            setRating(0)\r\n            setComment('')\r\n            dispatch({type: PRODUCT_CREATE_REVIEW_RESET})\r\n        }\r\n        dispatch(listProductDetails(id))\r\n\t}, [dispatch, successProductReview])\r\n\r\n\r\n\r\n    const addToCartHandler = () => {\r\n        navigate(`/cart/${id}?qty=${qty}`)\r\n    }\r\n\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(createProductReview(id,{rating,comment}))\r\n    } \r\n\r\n    return (\r\n        <div>\r\n            <Link to='/' className=\"btn btn-light my-3\">Strona główna</Link>\r\n            {loading ? <Loader />\r\n            : error ? <Message variant='danger' children={error} />\r\n                : (\r\n\r\n                    <div>\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <Image src={product.image} alt={product.name} fluid/>\r\n                            </Col>\r\n                            <Col md={3}>\r\n                                <ListGroup varinat='flush'>\r\n                                    <ListGroup.Item>\r\n                                        <h3>{product.name}</h3>\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Rating value={product.rating} text={product.numReviews} />\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <strong>Cena: </strong> {product.price} zł\r\n                                    </ListGroup.Item>\r\n                                    \r\n                                    <ListGroup.Item>\r\n                                    <strong>Opis: </strong> {product.description}\r\n                                    </ListGroup.Item>\r\n\r\n                                </ListGroup>\r\n                            </Col>\r\n\r\n                            <Col md={3}>\r\n                                <Card>\r\n                                    <ListGroup variant=\"flush\">\r\n                                        <ListGroup.Item>\r\n                                            <Row>\r\n                                                <Col>Cena: </Col>\r\n                                                <Col><strong>{product. price} zł</strong></Col>\r\n                                            </Row>\r\n                                        </ListGroup.Item>\r\n\r\n                                        <ListGroup.Item>\r\n                                            <Row>\r\n                                                <Col>Status: </Col>\r\n                                                <Col><strong>{product.countInStock > 0 ? <span className=\"text-green-600\">dostępny</span> : <span className=\"text-red-500\">niedostępny</span>}</strong></Col>\r\n                                            </Row>\r\n                                        </ListGroup.Item>\r\n\r\n                                        {product.countInStock > 0 && (\r\n                                            <ListGroup.Item>\r\n                                                <Row>\r\n                                                    <Col>Ilość: </Col>\r\n                                                    <Col xs='auto' className=\"my-1\">\r\n                                                        <Form.Control as='select' value={qty} onChange={(e) => setQty(e.target.value)}>\r\n                                                            {\r\n                                                                [...Array(product.countInStock).keys()].map((x) => (\r\n                                                                    <option key={x + 1} value={x + 1}>\r\n                                                                        {x + 1}\r\n                                                                    </option>\r\n                                                                ))\r\n                                                            }\r\n                                                        </Form.Control>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroup.Item>\r\n                                        )}\r\n\r\n                                        <ListGroup.Item className=\"text-center\">\r\n                                            <Button onClick={addToCartHandler} className=\"btn-block\" type='button' disabled={product.countInStock == 0} \r\n                                            >\r\n                                                Dodaj do koszyka\r\n                                            </Button>\r\n                                        </ListGroup.Item>\r\n\r\n                                    </ListGroup>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <h1 className=\"text-3xl mt-5 mb-3\">Opinie:</h1>\r\n                                {product.reviews.length < 1 && <Message varing='info' >Użytkownicy nie dodali jeszcze żadnej opinii\r\n                                o tym produkcie</Message>}\r\n\r\n                                <ListGroup variant=\"flush\" >\r\n                                    {product.reviews.map((review) => (\r\n                                        <ListGroup.Item key={review._id} className=\"mt-3\">\r\n                                            <strong>{review.name}</strong>\r\n                                            <span className=\"pl-5\"> {review.createdAt.substring(0, 10)}- {review.createdAt.substring(11, 16)}</span>\r\n                                            <Rating value={review.rating} color='#f8e825'/>\r\n                                            <p>{review.comment}</p>\r\n                                        </ListGroup.Item>\r\n                                        \r\n                                    ))}\r\n\r\n                                        <ListGroup.Item className=\"mt-5\">\r\n                                            <h4 className=\"text-xl text-center\">Dodaj opinię</h4>\r\n\r\n                                            {loadingProductReview && <Loader />}\r\n                                            {successProductReview && <Message varinat='succes'>Dziękujemy za opinię &#128512</Message>}\r\n                                            {errorProductReview && <Message varinat='succes'>{errorProductReview}</Message>}\r\n\r\n                                            {userInfo ? (\r\n                                                <Form onSubmit={submitHandler}>\r\n                                                    <Form.Group controlId='rating'>\r\n                                                        <Form.Label>Ocena</Form.Label>\r\n                                                        <Form.Control as='select' value={rating} onChange={(e) => setRating(e.target.value)}>\r\n                                                            <option value='0'>Wybierz na ile polecasz te produkt innym </option>\r\n                                                            <option value='1'>1 - Totalnie nie polecam</option>\r\n                                                            <option value='2'>2 - Odradzam</option>\r\n                                                            <option value='3'>3 - Może być</option>\r\n                                                            <option value='4'>4 - Polecam</option>\r\n                                                            <option value='5'>5 - Świetny</option>\r\n                                                        </Form.Control>\r\n\r\n                                                        <Form.Group controlId='comment' className=\"mt-3\">\r\n                                                            <Form.Label>Wiadomość</Form.Label>\r\n                                                            <Form.Control as='textarea' row='5' value={comment} onChange={(e) => setComment(e.target.value)} placeholder='Napisz kilka słów co sądzisz o produkcie'>\r\n                                                            </Form.Control>\r\n                                                        </Form.Group>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Button disabled={loadingProductReview} type='submit' varinat='primary' className=\"login-btn mt-5 mb-2\">\r\n                                                        Opublikuj\r\n                                                    </Button>\r\n\r\n                                                </Form>\r\n                                            ): (\r\n                                                <Message varing='info'>Aby dodać opinię <Link to='/login'>zaloguj się!</Link></Message>\r\n                                            )}\r\n                                        </ListGroup.Item>\r\n\r\n                                </ListGroup>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductScreen\r\n","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\HomePage.js",["234","235"],[],"import React, {useState, useEffect} from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport '../index.css';\r\nimport Product from '../components/Product'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {listProducts} from '../actions/productActions'\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport {useNavigate, useLocation} from 'react-router-dom'\r\nimport Paginate from '../components/Paginate'\r\n\r\n\r\nfunction HomePage() {\r\n\tconst dispatch = useDispatch()\r\n\tconst productList = useSelector(state => state.productList)\r\n\tconst {error, loading, products, page, pages} = productList\r\n\r\n\tconst navigate = useNavigate()\r\n\tconst location = useLocation()\r\n\r\n\tlet keyword = location.search\r\n\r\n\r\n\tuseEffect(()=>{\r\n\t\tdispatch(listProducts(keyword))\r\n\r\n\t}, [dispatch, keyword])\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h1 className=\"text-5xl text-center\">Najnowsze produkty</h1>\r\n\t\t\t{loading ? <Loader />\r\n\t\t\t\t:error ? <Message variant='danger' children={error} />\r\n\t\t\t\t:\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<Row className=\"mt-5\">\r\n\t\t\t\t\t\t{products.map(product => (\r\n\t\t\t\t\t\t\t<Col key={product._id} sm={12} md={6} lg={4} xl={3} >\r\n\t\t\t\t\t\t\t\t<Product product={product} />\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t<Paginate page={page} pages={pages} keyword={keyword}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default HomePage;\r\n","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\RegisterScreen.js",["236","237"],[],"import React, {useState, useEffect, useProps} from 'react'\r\nimport {Link, useNavigate, useLocation} from 'react-router-dom'\r\nimport {Form, Button, Row, Col} from 'react-bootstrap'\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {register} from '../actions/userActions'\r\nimport FormContainer from '../components/FormContainer';\r\n\r\n\r\nfunction RegisterScreen() {\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const location = useLocation()\r\n    const navigate = useNavigate()\r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n    const userRegister = useSelector(state => state.userRegister)\r\n    const {error, loading, userInfo} = userRegister\r\n\r\n    useEffect(() => {\r\n        if(userInfo){\r\n            navigate(redirect)\r\n        }\r\n    }, [navigate, userInfo, redirect])\r\n\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if(password != confirmPassword){\r\n            setMessage('Podane hasła muszą być identyczne!')\r\n        }else{\r\n            dispatch(register(name, email, password))\r\n        }\r\n    }\r\n\r\n\r\n  return (\r\n    <FormContainer>\r\n        <h1 className=\"text-5xl text-center mb-5\">Rejestracja</h1>\r\n        {message && <Message variant='danger'>{message}</Message>}\r\n        {error && <Message variant='danger'>{error}</Message>}\r\n        {loading && <Loader />}\r\n        <Form onSubmit={submitHandler}>\r\n\r\n            <Form.Group controlId='name'>\r\n                <Form.Label>Imię</Form.Label>\r\n                    <Form.Control required type='name' placeholder='Wprowadź swoje imię' value={name} onChange={(e)=>setName(e.target.value)}>\r\n        \r\n                    </Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='email' className=\"mt-3\">\r\n                <Form.Label>Adres email</Form.Label>\r\n                    <Form.Control required type='email' placeholder='Wprowadź adres email' value={email} onChange={(e)=>setEmail(e.target.value)}>\r\n                            \r\n                    </Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='password' className=\"mt-3\">\r\n                <Form.Label>Hasło</Form.Label>\r\n                    <Form.Control required type='password' placeholder='Wprowadź hasło' value={password} onChange={(e)=>setPassword(e.target.value)}>\r\n                        \r\n                    </Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='PasswordConfirm' className=\"mt-3\">\r\n                <Form.Label>Powtórz hasło</Form.Label>\r\n                    <Form.Control required type='Password' placeholder='Powtórz hasło' value={confirmPassword} onChange={(e)=>setConfirmPassword(e.target.value)}>\r\n                        \r\n                    </Form.Control>\r\n            </Form.Group>\r\n\r\n            <Button type='submit' variant='primary' className=\"mt-4 login-btn\">Zarejestruj się</Button>\r\n        </Form>\r\n\r\n        <Row className=\"py-3\">\r\n            <Col className=\"text-center\">\r\n                Posiadasz już konto? <Link to={redirect ? `/login?redirect=${redirect}` : '/login'}> Zaloguj się</Link>\r\n            </Col>\r\n        </Row>\r\n    </FormContainer>\r\n  )\r\n}\r\n\r\nexport default RegisterScreen\r\n","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\ProfileScreen.js",["238","239","240","241","242"],[],"import React, {useState, useEffect, useProps} from 'react'\r\nimport {Link, useNavigate, useLocation} from 'react-router-dom'\r\nimport {Form, Button, Row, Col,Table} from 'react-bootstrap'\r\nimport {LinkContainer} from 'react-router-bootstrap'\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {getUserDetails, register, updateUserProfile} from '../actions/userActions'\r\nimport {USER_UPDATE_PROFILE_RESET} from '../constants/userConstants'\r\nimport {listMyOrders} from '../actions/orderActions'\r\n\r\n\r\nfunction ProfileScreen() {\r\n\r\n    const location = useLocation()\r\n    const navigate = useNavigate()\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const {error, loading, user} = userDetails\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const {userInfo} = userLogin\r\n\r\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\r\n    const {success} = userUpdateProfile\r\n\r\n    const orderListMy = useSelector(state => state.orderListMy)\r\n    const {loading: loadingOrders, error:errorOrders, orders} = orderListMy\r\n\r\n    useEffect(() => {\r\n        if(!userInfo){\r\n            navigate('/login')\r\n        }else{\r\n            if(!user || !user.name || success || userInfo._id !== user._id){\r\n                dispatch({type: USER_UPDATE_PROFILE_RESET})\r\n                dispatch(getUserDetails(Number(userInfo._id)))\r\n                dispatch(listMyOrders())\r\n            }else{\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n            }\r\n        }}, [navigate, userInfo, dispatch, user, success])\r\n\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if(password != confirmPassword){\r\n            setMessage('Podane hasła muszą być identyczne!')\r\n        }else{\r\n            dispatch(updateUserProfile({\r\n                'id': user._id,\r\n                'name': name,\r\n                'email': email,\r\n                'password': password\r\n        }))\r\n        setMessage('')\r\n        }\r\n    }\r\n\r\n\r\n  return (\r\n    <Row>\r\n        <Col md={3}>\r\n            <h2 className=\"text-2xl text-center\">Moje dane:</h2>\r\n            {message && <Message variant='danger'>{message}</Message>}\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader />}\r\n            <Form onSubmit={submitHandler}>\r\n\r\n                <Form.Group controlId='name'>\r\n                    <Form.Label>Imię</Form.Label>\r\n                        <Form.Control required type='name' placeholder='Wprowadź swoje imię' value={name} onChange={(e)=>setName(e.target.value)}>\r\n            \r\n                        </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='email' className=\"mt-3\">\r\n                    <Form.Label>Adres email</Form.Label>\r\n                        <Form.Control required type='email' placeholder='Wprowadź adres email' value={email} onChange={(e)=>setEmail(e.target.value)}>\r\n                                \r\n                        </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='password' className=\"mt-3\">\r\n                    <Form.Label>Hasło</Form.Label>\r\n                        <Form.Control type='password' placeholder='Wprowadź hasło' value={password} onChange={(e)=>setPassword(e.target.value)}>\r\n                            \r\n                        </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='PasswordConfirm' className=\"mt-3\">\r\n                    <Form.Label>Powtórz hasło</Form.Label>\r\n                        <Form.Control type='Password' placeholder='Powtórz hasło' value={confirmPassword} onChange={(e)=>setConfirmPassword(e.target.value)}>\r\n                            \r\n                        </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Button type='submit' variant='primary' className=\"mt-4 login-btn\"><i class=\"fa-regular fa-pen-to-square\"></i> Zapisz zmiany</Button>\r\n            </Form>\r\n        </Col>\r\n\r\n        <Col md={9}>\r\n            <h2 className=\"text-2xl text-center\">Moje zamówienia</h2>\r\n            {loadingOrders ? (\r\n                <Loader />\r\n            ): errorOrders ? (\r\n                <Message varinat='danger'>{errorOrders}</Message>\r\n            ): (\r\n                <Table striped responsive className=\"table-sm\">\r\n                    \r\n                    <thead>\r\n                        <tr>\r\n                            <th>Numer</th>\r\n                            <th>Data</th>\r\n                            <th>Kwota</th>\r\n                            <th>Płatność</th>\r\n                            <th>Dostarczone</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {orders.map((order) => (\r\n                            <tr key={order._id}>\r\n                                <td>{order._id}</td>\r\n                                <td>{order.createAt.substring(0, 10)} - {order.createAt.substring(11, 16)}</td>\r\n                                <td>{order.totalPrice} zł</td>\r\n                                <td>{!order.isPaid ? (\r\n                                    <p className=\"text-red-500\">Nie opłacone</p>\r\n                                ): (\r\n                                    order.paidAt ? (\r\n                                      <p className=\"text-green-500\">Opłacone {order.paidAt.substring(0, 10)}- {order.paidAt.substring(11, 16)}</p>\r\n                                    ) : (\r\n                                      <p className=\"text-green-500\">Opłacone</p>\r\n                                    ))}\r\n                                </td>\r\n                                <td>\r\n                                    <LinkContainer to={`/order/${order._id}`}>\r\n                                        <Button className=\"btn-sm\">Szczegóły</Button>\r\n                                    </LinkContainer>\r\n                                </td>\r\n                                <td></td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </Table>\r\n            )} \r\n        </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default ProfileScreen\r\n","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\CartScreen.js",["243","244","245"],[],"import React, {useEffect} from 'react'\r\nimport {Route, Link, useParams, useNavigate} from 'react-router-dom'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {Row, Col, ListGroup, Image, Form, Button, Card} from 'react-bootstrap'\r\nimport Message from '../components/Message'\r\nimport {addToCart, removeFromCart} from '../actions/cartActions'\r\nimport queryString from 'query-string'\r\nimport axios from 'axios'\r\nimport { useLocation } from 'react-router-dom'\r\nimport '../index.css'\r\n\r\nfunction CartScreen() {\r\n    const {id} = useParams()\r\n    const navigate = useNavigate();\r\n\r\n\r\n    const location = useLocation()\r\n    const qty = location.search ? Number(location.search.split('=')[1]) : 1\r\n\r\n    const userLogin = useSelector((state) => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const cart = useSelector(state => state.cart)\r\n    const {cartItems} = cart\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if(id){\r\n            dispatch(addToCart(id, qty))\r\n        }\r\n    }, [dispatch, id, qty])\r\n\r\n    const removeFromCartHandler = (id) => {\r\n        dispatch(removeFromCart(id))\r\n    }\r\n\r\n    const checkoutHandler = () => {\r\n        if (userInfo) {\r\n            navigate('/shipping')\r\n          } else {\r\n            navigate('/login')\r\n          }\r\n    }\r\n\r\n\r\n  return (\r\n    <Row>\r\n        <Col md={8}>\r\n            <h1 className=\"text-5xl text-center mb-5\">Twój koszyk</h1>\r\n            {cartItems.length === 0 ? (\r\n                <Message variant=\"info\"> Twój koszyk jest pusty <Link to={'/'}> Powrót do strony głównej</Link> </Message>\r\n            ) : (\r\n                <ListGroup variant='flush'>\r\n                    {cartItems.map(item => (\r\n                        <ListGroup.Item key={item.product} >\r\n                            <Row>\r\n                                <Col md={2}>\r\n                                    <Image src={item.image} alt={item.name} fluid rounded/>\r\n                                </Col>\r\n                                <Col md={3}>\r\n                                    <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                </Col>\r\n                                <Col md={2}>\r\n                                    {item.price} zł\r\n                                </Col>\r\n                                <Col md={1}>\r\n                                    <Form.Control as='select' value={item.qty} onChange={(e) => dispatch(addToCart(item.product, \r\n                                        Number(e.target.value)))}>\r\n                                        {\r\n                                            [...Array(item.countInStock).keys()].map((x) => (\r\n                                                <option key={x + 1} value={x + 1} >\r\n                                                    {x + 1}\r\n                                                </option>\r\n                                            ))}\r\n                                    </Form.Control>\r\n                                </Col>\r\n                                <Col md={1}>\r\n                                    <Button type='button' variant='light' onClick={() => removeFromCartHandler(item.product)}>\r\n                                        <i class=\"fa-solid fa-trash-can\"></i>\r\n                                    </Button>\r\n                                </Col>\r\n\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n                    ))}\r\n                </ListGroup>\r\n            )\r\n        }\r\n        </Col>\r\n        <Col md={4}>\r\n            <Card>\r\n                <ListGroup variant='flush'>\r\n                    <ListGroup.Item>\r\n                        <h2 className=\"text-center text-2xl\">Podsumowanie: <p className=\"text-sm\">{cartItems.reduce((acc, item) =>acc + item.qty, 0)} przedmiotów</p></h2>\r\n                        <span className=\"text-base\">Razem: {cartItems.reduce((acc, item) =>acc + item.qty * item.price, 0).toFixed(2)} zł </span>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item className=\"text-center\">\r\n                        <Button type='button' className=\"btn-block\" disabled={cartItems.length === 0} onClick={checkoutHandler}>\r\n                            Przejdź do kasy\r\n                        </Button>\r\n                    </ListGroup.Item>\r\n                </ListGroup>\r\n            </Card>\r\n        </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\n\r\nexport default CartScreen\r\n\r\n","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\LoginScreen.js",["246"],[],"import React, {useState, useEffect, useProps} from 'react'\r\nimport {Link, useNavigate, useLocation} from 'react-router-dom'\r\nimport {Form, Button, Row, Col} from 'react-bootstrap'\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {login} from '../actions/userActions'\r\nimport FormContainer from '../components/FormContainer';\r\n\r\nfunction LoginScreen() {\r\n\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const location = useLocation()\r\n    const navigate = useNavigate()\r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const {error, loading, userInfo} = userLogin\r\n\r\n    \r\n    useEffect(() => {\r\n        if(userInfo){\r\n            navigate(redirect)\r\n        }\r\n    }, [navigate, userInfo, redirect])\r\n\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(login(email, password))\r\n    }\r\n\r\n\r\n  return (\r\n    <FormContainer >\r\n        <h1 className=\"text-5xl text-center mb-5\">Logowanie</h1>\r\n        {error && <Message variant='danger'>{error}</Message>}\r\n        {loading && <Loader />}\r\n        <Form onSubmit={submitHandler}>\r\n            <Form.Group controlId='email'>\r\n                <Form.Label>Adres email</Form.Label>\r\n                    <Form.Control type='email' placeholder='Wprowadź adres email' value={email} onChange={(e)=>setEmail(e.target.value)}>\r\n                        \r\n                    </Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='password' className=\"mt-3\">\r\n                <Form.Label>Hasło</Form.Label>\r\n                    <Form.Control type='password' placeholder='Wprowadź hasło' value={password} onChange={(e)=>setPassword(e.target.value)}>\r\n                        \r\n                    </Form.Control>\r\n            </Form.Group>\r\n\r\n            <Button type='submit' variant='primary' className=\"mt-4 login-btn\">Zaloguj się</Button>\r\n        </Form>\r\n\r\n        <Row className=\"py-3\">\r\n            <Col className=\"text-center\">\r\n                Nie masz konta? <Link to={redirect ? `/register?redirect=${redirect}` : '/register'}> Zarejestruj się</Link>\r\n            </Col>\r\n        </Row>\r\n    </FormContainer>\r\n  )\r\n}\r\n\r\nexport default LoginScreen\r\n","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\ShippingScreen.js",["247","248","249","250","251","252","253","254","255"],[],"import React, {useState, useEffect, useProps} from 'react'\r\nimport {Link, useNavigate, useLocation} from 'react-router-dom'\r\nimport {Form, Button, Row, Col} from 'react-bootstrap'\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {register} from '../actions/userActions'\r\nimport FormContainer from '../components/FormContainer';\r\nimport {saveShippingAddress} from '../actions/cartActions'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\n\r\n\r\n\r\nfunction ShippingScreen() {\r\n    const location = useLocation()\r\n    const navigate = useNavigate()\r\n\r\n    const cart = useSelector(state => state.cart)\r\n    const {shippingAddress} = cart\r\n\r\n\r\n    const [address, setAddress] = useState(shippingAddress.address)\r\n    const [city, setCity] = useState(shippingAddress.city)\r\n    const [postalCode, setPostalCode] = useState(shippingAddress.postalCode)\r\n    const [country, setCountry] = useState(shippingAddress.country)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const submitHandler = (e) =>{\r\n        e.preventDefault()\r\n        dispatch(saveShippingAddress({address, city, postalCode, country}))\r\n        navigate('/payment')\r\n    }\r\n\r\n\r\n  return (\r\n    <FormContainer >\r\n        <CheckoutSteps step1 step2/>\r\n        <h1 className=\"text-3xl text-center\">Dostawa i płatność</h1>\r\n        <Form onSubmit={submitHandler}>\r\n\r\n            <Form.Group controlId='address' className=\"mt-3\">\r\n                <Form.Label>Ulica</Form.Label>\r\n                    <Form.Control required type='text' placeholder='Wprowadź ulicę i numer domu' value={address ? address : ''} onChange={(e)=>setAddress(e.target.value)}>\r\n            \r\n                    </Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='city' className=\"mt-3\">\r\n                <Form.Label>Miasto</Form.Label>\r\n                    <Form.Control required type='text' placeholder='Wprowadź nazwę twojego miasta' value={city ? city : ''} onChange={(e)=>setCity(e.target.value)}>\r\n            \r\n                    </Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='postalCode' className=\"mt-3\">\r\n                <Form.Label>Kod pocztowy</Form.Label>\r\n                    <Form.Control required type='text' placeholder='Wprowadź kod pocztowy' value={postalCode ? postalCode : ''} onChange={(e)=>setPostalCode(e.target.value)}>\r\n            \r\n                    </Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='country' className=\"mt-3\">\r\n                <Form.Label>Państwo</Form.Label>\r\n                    <Form.Control required type='text' placeholder='Wprowadź nazwę Państwa' value={country ? country : ''} onChange={(e)=>setCountry(e.target.value)}>\r\n            \r\n                    </Form.Control>\r\n            </Form.Group>\r\n\r\n            <Button type='submit' variant='primary' className=\"login-btn mt-5\">Kontynuuj</Button>\r\n\r\n\r\n        </Form>\r\n    </FormContainer>      \r\n  )\r\n}\r\n\r\n\r\n\r\nexport default ShippingScreen\r\n","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\PaymentScreen.js",["256","257","258","259","260","261","262","263","264"],[],"import React, {useState, useEffect, useProps} from 'react'\r\nimport {Link, useNavigate, useLocation} from 'react-router-dom'\r\nimport {Form, Button, Row, Col, FormGroup} from 'react-bootstrap'\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {register} from '../actions/userActions'\r\nimport FormContainer from '../components/FormContainer';\r\nimport {saveShippingAddress} from '../actions/cartActions'\r\nimport {savePaymentMethod} from '../actions/cartActions'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\n\r\n\r\n\r\n\r\nfunction PaymentScreen() {\r\n    const location = useLocation()\r\n    const navigate = useNavigate()\r\n\r\n    const cart = useSelector(state => state.cart)\r\n    const {shippingAddress} = cart\r\n    const dispatch = useDispatch()\r\n\r\n    const [paymentMethod, setPaymentMethod] = useState('')\r\n\r\n    if(!shippingAddress.address){\r\n        navigate('/shipping')\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(savePaymentMethod(paymentMethod))\r\n        navigate('/placeorder')\r\n    }\r\n\r\n  return (\r\n      <FormContainer>\r\n        <CheckoutSteps step1 step2 step3/>\r\n        <Form onSubmit={submitHandler}>\r\n            <FormGroup>\r\n                <Form as='legend'>Wybierz metodę płatnośći</Form>\r\n                <Col className=\"mt-2\">\r\n                    <Form.Check type='radio' label='PayPal' value='paypal' name='paymentMethod' onChange={(e) => setPaymentMethod(e.target.value)}>\r\n                    </Form.Check>\r\n                </Col>\r\n                <Col className=\"mt-2\">\r\n                    <Form.Check type='radio' label='Karta Kredytowa' value='Karta Kredytowa' name='paymentMethod' onChange={(e) => setPaymentMethod(e.target.value)}>\r\n                    </Form.Check>\r\n                </Col>\r\n                <Col className=\"mt-2\">\r\n                    <Form.Check type='radio' label='Przelewy24' value='Przelewy24' name='paymentMethod' onChange={(e) => setPaymentMethod(e.target.value)}>\r\n                    </Form.Check>\r\n                </Col>\r\n                <Col className=\"mt-2\">\r\n                    <Form.Check type='radio' label='Płatność przy odbiorze' value='Płatność przy odbiorze' name='paymentMethod' onChange={(e) => setPaymentMethod(e.target.value)}>\r\n                    </Form.Check>\r\n                </Col>\r\n            </FormGroup>\r\n\r\n\r\n            <Button type='submit' variant='primary' className=\"mt-5\" disabled={paymentMethod === ''}>\r\n                Kontynnuj\r\n            </Button>\r\n        </Form>\r\n    </FormContainer>\r\n  )\r\n}\r\n\r\nexport default PaymentScreen\r\n","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\PlaceOrderScreen.js",["265","266","267","268","269","270","271","272","273"],[],"import React, {useState, useEffect, useProps} from 'react'\r\nimport {Link, useNavigate, useLocation} from 'react-router-dom'\r\nimport {Form, Button, Row, Col, ListGroup, Image, Card} from 'react-bootstrap'\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {register} from '../actions/userActions'\r\nimport FormContainer from '../components/FormContainer';\r\nimport {saveShippingAddress} from '../actions/cartActions'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport {createOrder} from '../actions/orderActions'\r\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants';\r\n\r\nfunction PlaceOrderScreen() {\r\n    const orderCreate = useSelector(state => state.orderCreate)\r\n    const{order, error, success} = orderCreate\r\n\r\n    const dispatch = useDispatch()\r\n    const location = useLocation()\r\n    const navigate = useNavigate()\r\n    const cart = useSelector(state => state.cart)\r\n\r\n    cart.itemsPrice = cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\r\n    cart.shippingPrice = (cart.itemsPrice > 500 ? 0 : 10).toFixed(2)\r\n    cart.taxPrice = (Number((cart.itemsPrice) * (0.23))).toFixed(2)\r\n\r\n    cart.totalPrice = (Number(cart.itemsPrice) + Number(cart.shippingPrice) + Number(cart.taxPrice)).toFixed(2)\r\n\r\n    \r\n    if (! cart.paymentMethod){\r\n        navigate(`/payment`)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(success){\r\n            navigate(`/order/${order._id}`)\r\n            dispatch({type: ORDER_CREATE_RESET})\r\n        }\r\n    }, [success, navigate])\r\n\r\n    const placeOrder = () =>{\r\n        dispatch(createOrder({\r\n            orderItems: cart.cartItems,\r\n            shippingAddress: cart.shippingAddress,\r\n            paymentMethod: cart.paymentMethod,\r\n            itemsPrice: cart.itemsPrice,\r\n            shippingPrice: cart.shippingPrice,\r\n            taxPrice: cart.taxPrice,\r\n            totalPrice: cart.totalPrice,\r\n        }))\r\n    }\r\n    \r\n\r\n  return (\r\n    <div>\r\n      <CheckoutSteps step1 step2 step3 step4/>\r\n      <Row>\r\n        <Col md={8}>\r\n            <ListGroup cariant='flush'>\r\n                <ListGroup.Item >\r\n                    <h2 className=\"text-3xl font-bold\">Adres dostawy</h2>\r\n                    <p className=\"pt-4 text-xl\">\r\n                        {cart.shippingAddress.address}, {cart.shippingAddress.city}\r\n                        {'   '},\r\n                        {cart.shippingAddress.postalCode},\r\n                        {'   '}\r\n                        {cart.shippingAddress.country}\r\n                    </p>\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item className=\"mt-4\">\r\n                    <h2 className=\"text-3xl font-bold\">Metoda płatności </h2>\r\n                    <p className=\"pt-4 text-xl\">\r\n                        {cart.paymentMethod}\r\n                    </p>\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item className=\"mt-4\">\r\n                    <h2 className=\"text-3xl font-bold\">Kupowane przedmioty: </h2>\r\n                    <p className=\"pt-4 text-xl\">\r\n                        <ListGroup cariant='flush'>\r\n                            {cart.cartItems.map((item, index) => (\r\n                                <ListGroup.Item key={index} className=\"text-base\">\r\n                                    <Row>\r\n                                        <Col md={1}>\r\n                                            <Image src={item.image} alt={item.name} fluid rounded/>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                        </Col>\r\n                                        <Col md={4}>\r\n                                            {item.qty}  X  ${item.price} zł = {item.qty * item.price} zł\r\n                                        </Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n                            ))}\r\n                        </ListGroup>\r\n                    </p>\r\n                </ListGroup.Item>\r\n\r\n            </ListGroup>\r\n        </Col>\r\n\r\n        <Col md={4}>\r\n            <Card>\r\n                <ListGroup varinat='flush'>\r\n                    <ListGroup.Item>\r\n                        <h2 className=\"text-3xl text-center\">Podsumowanie zamówienia</h2>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col>Przedmioty: </Col>\r\n                            <Col>{cart.itemsPrice} zł</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col>Koszt dostawy: </Col>\r\n                            <Col>{cart.shippingPrice} zł</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col>Podatek: </Col>\r\n                            <Col>{cart.taxPrice} zł</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col>Łącznie: </Col>\r\n                            <Col>{cart.totalPrice} zł</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup>\r\n                        {error && <Message variant='danger'>{error}</Message>}\r\n                    </ListGroup>\r\n\r\n                    <ListGroup.Item>\r\n                        <Button className=\"btn-block login-btn\" type='button' onClick={placeOrder}>Złóż zamówienie</Button>\r\n                    </ListGroup.Item>\r\n\r\n                </ListGroup>\r\n            </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PlaceOrderScreen\r\n","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\OrderScreen.js",["274","275","276","277","278","279","280","281","282"],[],"import React, {useState, useEffect, useProps} from 'react'\r\nimport {Link, useNavigate, useLocation, useParams} from 'react-router-dom'\r\nimport {Form, Button, Row, Col, ListGroup, Image, Card} from 'react-bootstrap'\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {register} from '../actions/userActions'\r\nimport FormContainer from '../components/FormContainer';\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport {getOrderDetails} from '../actions/orderActions'\r\nimport { ORDER_CREATE_RESET, ORDER_DELIVERED_RESET } from '../constants/orderConstants'\r\nimport { deliverOrder } from '../actions/orderActions';\r\n\r\n\r\nfunction OrderScreen() {\r\n    const { id: orderId } = useParams()\r\n    const dispatch = useDispatch()\r\n\r\n    const orderDetails = useSelector(state => state.orderDetails)\r\n    const{order, error, loading} = orderDetails\r\n\r\n    const orderDelivered = useSelector(state => state.orderDelivered)\r\n    const{loading:loadingDelivered, success:successDelivered, } = orderDelivered\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const {userInfo } = userLogin\r\n\r\n\r\n    const location = useLocation()\r\n    const navigate = useNavigate()\r\n\r\n    if(!loading && !error){\r\n        order.itemsPrice = order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\r\n    }\r\n\r\n    \r\n    useEffect(() => {\r\n\r\n        if(!userInfo){\r\n            navigate('/login')\r\n        }\r\n\r\n        if(!order || order._id !== Number(orderId || successDelivered)){\r\n            dispatch({type: ORDER_DELIVERED_RESET})\r\n            dispatch(getOrderDetails(orderId))\r\n            \r\n        }\r\n    }, [dispatch, order, orderId, successDelivered, navigate])\r\n\r\n\r\n    const deliveredHandler = () =>{\r\n        dispatch(deliverOrder(order))\r\n        window.location.reload()\r\n    }\r\n\r\n\r\n\r\n  return loading ? (\r\n    <Loader />\r\n    ) : error ? (\r\n        <Message variant='danger'>{error}</Message>\r\n    ): (\r\n\r\n    <div>\r\n        <h1 className=\"text-3xl text-center\">Zamówienie numer: {order._id} </h1>\r\n      <Row className=\"mt-5\">\r\n        <Col md={8}>\r\n            <ListGroup cariant='flush'>\r\n                <ListGroup.Item >\r\n                    <h2 className=\"text-3xl font-bold\">Dostawa</h2>\r\n                    <p className=\"pt-4 text-xl\">\r\n                        <strong>Imię: </strong> {order.user.name}\r\n                    </p>\r\n                    <p className=\"pt-4 text-xl\">\r\n                        <strong>Email: </strong> <a href={`mailto:${order.user.email}`}>{order.user.email}</a>\r\n                    </p>\r\n                    <p className=\"pt-4 text-xl\">\r\n                        {order.shippingAddress.address}, {order.shippingAddress.city}\r\n                        {'   '},\r\n                        {order.shippingAddress.postalCode},\r\n                        {'   '}\r\n                        {order.shippingAddress.country}\r\n                    </p>\r\n\r\n                    {order.isDelivered ? (\r\n                        <Message variant='success' >Zamówienie zostało dostarczone</Message>\r\n                    ): <Message variant='warning'>Zamówienie nie zostało jeszcze dostarczone</Message>}\r\n                </ListGroup.Item>\r\n\r\n\r\n                <ListGroup.Item className=\"mt-4\">\r\n                    <h2 className=\"text-3xl font-bold\">Płatność </h2>\r\n                    <p className=\"pt-4 text-xl mb-3\">\r\n                        <strong>Wybrana metoda płatności: </strong> {order.paymentMethod}\r\n                    </p>\r\n                    {order.isPaid ? (\r\n                        <Message variant='success' >Zamówienie zostało opłacone {order.paidAt}</Message>\r\n                    ): <Message variant='warning'>Zamówienie nie zostało opłacone</Message>}\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item className=\"mt-4\">\r\n                    <h2 className=\"text-3xl font-bold\">Zakupione przedmioty: </h2>\r\n                    <p className=\"pt-4 text-xl\">\r\n                        <ListGroup cariant='flush'>\r\n                            {order.orderItems.map((item, index) => (\r\n                                <ListGroup.Item key={index} className=\"text-base\">\r\n                                    <Row>\r\n                                        <Col md={1}>\r\n                                            <Image src={item.image} alt={item.name} fluid rounded/>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                        </Col>\r\n                                        <Col md={4}>\r\n                                            {item.qty}  X  {item.price} zł = {item.qty * item.price} zł\r\n                                        </Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n                            ))}\r\n                        </ListGroup>\r\n                    </p>\r\n                </ListGroup.Item>\r\n\r\n            </ListGroup>\r\n        </Col>\r\n\r\n        <Col md={4}>\r\n            <Card>\r\n                <ListGroup varinat='flush'>\r\n                    <ListGroup.Item>\r\n                        <h2 className=\"text-3xl text-center\">Podsumowanie zamówienia</h2>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col>Przedmioty: </Col>\r\n                            <Col>{order.itemsPrice} zł</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col>Koszt dostawy: </Col>\r\n                            <Col>{order.shippingPrice} zł</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col>Podatek: </Col>\r\n                            <Col>{order.taxPrice} zł</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col>Łącznie: </Col>\r\n                            <Col>{order.totalPrice} zł</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n\r\n                </ListGroup>\r\n                \r\n                {loadingDelivered && <Loader />}\r\n\r\n                {userInfo && userInfo.isAdmin && ! order.isDelivered ?(\r\n                    <ListGroup.Item className=\"p-4\">\r\n                        <Button type='button' className=\"btn login-btn\" onClick={deliveredHandler}>\r\n                            Potwierdź dostawę\r\n                        </Button>\r\n                    </ListGroup.Item>\r\n                ): null}\r\n\r\n            </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default OrderScreen\r\n","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\UserListScreen.js",["283","284","285","286","287","288","289","290"],[],"import React, {useState, useEffect, useProps} from 'react'\r\nimport { useNavigate, useLocation} from 'react-router-dom'\r\nimport {Form, Button, Row, Col, Table} from 'react-bootstrap'\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport FormContainer from '../components/FormContainer';\r\nimport {listUsers, deleteUser} from '../actions/userActions'\r\nimport {LinkContainer} from 'react-router-bootstrap'\r\n\r\n\r\n\r\nfunction UserListScreen() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userList = useSelector(state => state.userList)\r\n    const {loading, error, users} = userList\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const {userInfo} = userLogin\r\n\r\n    const userDelete = useSelector(state => state.userDelete)\r\n    const {success: successDelete} = userDelete\r\n\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        if(userInfo && userInfo.isAdmin){\r\n            dispatch(listUsers())\r\n        }else{\r\n            navigate(`/login`)\r\n        }\r\n        \r\n    }, [dispatch, navigate, successDelete])\r\n\r\n    const deleteHandler = (id, email) => {\r\n        if(window.confirm(`Czy na pewno chcesz usunąć użytkownika o adresie email: ${email} ?`)){\r\n            dispatch(deleteUser(id))\r\n        }\r\n\r\n\r\n        \r\n    } \r\n\r\n  return (\r\n    <div>\r\n        <h1 className=\"text-4xl text-center mb-5\">Zarejestrowani użytkownicy</h1>\r\n        {loading\r\n        ? <Loader />\r\n        : error\r\n            ?<Message varint='danger'>{error}</Message>\r\n            :(\r\n                <Table striped bordered hover responsive className=\"table-sm\">\r\n                    <thead className=\"text-center \">\r\n                        <tr>\r\n                            <th>Id</th>\r\n                            <th>Imię</th>\r\n                            <th>Email</th>\r\n                            <th>Admin</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody className=\"text-center\">\r\n                        {users.map(user => (\r\n                            <tr key={user._id}>\r\n                                <td>{user._id}</td>\r\n                                <td>{user.name}</td>\r\n                                <td>{user.email}</td>\r\n                                <td>{user.isAdmin ? (\r\n                                    <i class=\"fa-solid fa-circle-check text-lime-500\"></i>\r\n                                ): <i class=\"fa-solid fa-circle-minus text-red-500\"></i>}</td>\r\n                                <td>\r\n                                    <LinkContainer to={`/admin/user/${user._id}/edit`}>\r\n                                        <Button varinat='light' className=\"btn-sm\"><i class=\"fa-regular fa-pen-to-square text-lime-500\"></i></Button>\r\n                                    </LinkContainer>\r\n\r\n                                    <Button varinat='danger' className=\"btn-sm\" onClick={() => deleteHandler(user._id, user.email)}><i class=\"fa-solid fa-trash-can text-red-500\"></i></Button>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </Table>\r\n            )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UserListScreen\r\n","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\UserEditScreen.js",["291","292","293","294","295"],[],"import React, {useState, useEffect, useProps} from 'react'\r\nimport {Link, useNavigate, useLocation, useParams} from 'react-router-dom'\r\nimport {Form, Button, Row, Col} from 'react-bootstrap'\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {getUserDetails, updateUser} from '../actions/userActions'\r\nimport FormContainer from '../components/FormContainer';\r\nimport {USER_UPDATE_RESET} from '../constants/userConstants'\r\n\r\nfunction EditUserScreen() {\r\n    // const{id} = useParams()\r\n    const{id: userId} = useParams()\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [isAdmin, setIsAdmin] = useState(false)\r\n\r\n    const navigate = useNavigate()\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const {error, loading, user} = userDetails\r\n\r\n    const userUpdate = useSelector(state => state.userUpdate)\r\n    const {error:errorUpdate, loading:loadingUpdate, success: successUpdate} = userUpdate\r\n\r\n    useEffect(() => {\r\n        if(successUpdate){\r\n            dispatch({type: USER_UPDATE_RESET})\r\n            navigate('/admin/userlist')\r\n        }else{\r\n                \r\n            if(!user || user._id !== Number(userId)){\r\n                dispatch(getUserDetails(userId))\r\n            }else{\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n                setIsAdmin(user.isAdmin)\r\n            }\r\n        }\r\n\r\n    }, [userId, user, successUpdate, navigate])\r\n\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(updateUser({_id: user._id, name, email, isAdmin}))\r\n    }\r\n\r\n\r\n  return (\r\n    <div>\r\n        <Link to='/admin/userlist' >Powrót</Link>\r\n        <FormContainer className=\"formcontainer\">\r\n            <h1 className=\"text-5xl text-center mb-5\">Edytuj użytkownika</h1>\r\n            {loadingUpdate && <Loader />}\r\n\r\n            {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n            \r\n            {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message> : (\r\n                <Form onSubmit={submitHandler}>\r\n\r\n                <Form.Group controlId='name'>\r\n                    <Form.Label>Imię</Form.Label>\r\n                        <Form.Control type='name' placeholder='Wprowadź swoje imię' value={name} onChange={(e)=>setName(e.target.value)}>\r\n            \r\n                        </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='email' className=\"mt-3\">\r\n                    <Form.Label>Adres email</Form.Label>\r\n                        <Form.Control type='email' placeholder='Wprowadź adres email' value={email} onChange={(e)=>setEmail(e.target.value)}>\r\n                                \r\n                        </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='isadmin' className=\"mt-3\">\r\n                    <Form.Check type='checkbox' label='Is Admin' checked={isAdmin} onChange={(e) => setIsAdmin(e.target.checked)}>\r\n\r\n                    </Form.Check>\r\n\r\n                </Form.Group>\r\n\r\n                <Button type='submit' variant='primary' className=\"mt-4 login-btn\">Zapisz zmiany</Button>\r\n            </Form>\r\n            )}\r\n\r\n    </FormContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EditUserScreen\r\n","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\ProductListScreen.js",["296","297","298","299","300","301","302","303"],[],"import React, {useState, useEffect, useProps} from 'react'\r\nimport { useNavigate, useLocation, useParams, Link} from 'react-router-dom'\r\nimport {Form, Button, Row, Col, Table} from 'react-bootstrap'\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport FormContainer from '../components/FormContainer';\r\nimport {listUsers, deleteUser} from '../actions/userActions'\r\nimport {LinkContainer} from 'react-router-bootstrap'\r\nimport {listProducts, deleteProduct, createProduct} from '../actions/productActions'\r\nimport {PRODUCT_CREATE_RESET} from '../constants/productConstants'\r\nimport Paginate from '../components/Paginate';\r\n\r\nfunction ProductListScreen() {\r\n    const { id } = useParams()\r\n\r\n    const dispatch = useDispatch()\r\n    \r\n\r\n    const productList = useSelector(state => state.productList)\r\n    const {loading, error, products, pages, page} = productList\r\n\r\n    const productDelete = useSelector(state => state.productDelete)\r\n    const {loading:loadingDelete, error:errorDelete, success:successDelete} = productDelete\r\n\r\n    const productCreate = useSelector(state => state.productCreate)\r\n    const {loading:loadingCreate, error:errorCreate, success:successCreate, product: createdProduct} = productCreate\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const {userInfo} = userLogin\r\n\r\n\r\n    const navigate = useNavigate()\r\n    const location = useLocation()\r\n\r\n    let keyword = location.search\r\n\r\n    useEffect(() => {\r\n        dispatch({type: PRODUCT_CREATE_RESET})\r\n\r\n        if(!userInfo.isAdmin){\r\n            navigate(`/login`)\r\n        }\r\n        \r\n        if(successCreate){\r\n            navigate(`/admin/product/${createdProduct._id}/edit`)\r\n        }else{\r\n            dispatch(listProducts(keyword))\r\n        }\r\n\r\n    }, [dispatch, navigate, userInfo, successDelete, successCreate, keyword])\r\n\r\n\r\n\r\n    const deleteHandler = (id, name) => {\r\n        if(window.confirm(`Czy na pewno chcesz usunąć ten produkt ${name} ?`)){\r\n            dispatch(deleteProduct(id))\r\n        }\r\n    } \r\n\r\n    const createProductHandler = () => {\r\n        dispatch(createProduct())\r\n    }\r\n\r\n  return (\r\n    <div>\r\n        \r\n        <Row className=\"align-items-center\">\r\n            <Col>\r\n                <h1 className=\"text-4xl text-center mb-5\" >Produkty w sklepie ({products.length})</h1>\r\n            </Col>\r\n            <Col className=\"text-right\">\r\n                <Button className=\"my-3\" onClick={createProductHandler}>\r\n                    Dodaj produkt\r\n                </Button>\r\n            </Col>\r\n        </Row>\r\n\r\n        {loadingDelete && <Loader />}\r\n        {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\r\n\r\n        {loadingCreate && <Loader />}\r\n        {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\r\n\r\n        {loading\r\n        ? <Loader />\r\n        : error\r\n            ?<Message varint='danger'>{error}</Message>\r\n            :(\r\n\r\n                <div>\r\n                    <Table striped bordered hover responsive className=\"table-sm\">\r\n                        <thead className=\"text-center \">\r\n                            <tr>\r\n                                <th>Id</th>\r\n                                <th>Nazwa</th>\r\n                                <th>Ilość</th>\r\n                                <th>Cena</th>\r\n                                <th>Kategoria</th>\r\n                                <th>Marka</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody className=\"text-center\">\r\n                            {products.map(product => (\r\n                                <tr key={product._id}>\r\n                                    <td>{product._id}</td>\r\n                                    <td><Link to={`/product/${product._id}`}>{product.name}</Link></td>\r\n                                    <td>{product.countInStock}</td>\r\n                                    <td>{product.price} zł</td>\r\n                                    <td>{product.category}</td>\r\n                                    <td>{product.brand}</td>\r\n                                    \r\n                                    <td >\r\n                                        <LinkContainer to={`/admin/product/${product._id}/edit`}>\r\n                                            <Button varinat='light' className=\"btn-sm\"><i class=\"fa-regular fa-pen-to-square text-lime-500\"></i></Button>\r\n                                        </LinkContainer>\r\n\r\n                                        <Button varinat='danger' className=\"btn-sm\" onClick={() => deleteHandler(product._id, product.name)}><i class=\"fa-solid fa-trash-can text-red-500\"></i></Button>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                    <Paginate page={page} pages={pages} isAdmin={true} keyword={keyword}/>\r\n                </div>\r\n            )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProductListScreen\r\n","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\ProductEditScreen.js",["304","305","306","307","308","309"],[],"import React, {useState, useEffect, useProps} from 'react'\r\nimport axios from 'axios';\r\nimport {Link, useNavigate, useLocation, useParams} from 'react-router-dom'\r\nimport {Form, Button, Row, Col} from 'react-bootstrap'\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport { listProductDetails, createProduct, updateProduct } from '../actions/productActions';\r\nimport FormContainer from '../components/FormContainer';\r\nimport {USER_UPDATE_RESET} from '../constants/userConstants'\r\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants';\r\n\r\n\r\nfunction ProductEditScreen() {\r\n    // const{id} = useParams()\r\n    const{id: productId} = useParams()\r\n\r\n    const [name, setName] = useState('')\r\n    const [price, setPrice] = useState('')\r\n    const [brand, setBrand] = useState('')\r\n    const [image, setImage] = useState('')\r\n    const [category, setCategory] = useState('')\r\n    const [description, setDescription] = useState('')\r\n    const [countInStock, setCountInStock] = useState(0)\r\n    const [uploading, setUploading] = useState(false)\r\n\r\n    const navigate = useNavigate()\r\n    const dispatch = useDispatch()\r\n\r\n    const productDetails = useSelector(state => state.productDetails)\r\n    const {error, loading, product} = productDetails\r\n\r\n    const productUpdate = useSelector(state => state.productUpdate)\r\n    const {error:errorUpdate, loading:loadingUpdate, success:successUpdate} = productUpdate\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if(successUpdate){\r\n            dispatch({type:PRODUCT_UPDATE_RESET})\r\n            navigate(`/admin/productlist`)\r\n        }else{\r\n            if(!product.name || product._id !== Number(productId)){\r\n                dispatch(listProductDetails(productId))\r\n            }else{\r\n                setName(product.name)\r\n                setPrice(product.price)\r\n                setBrand(product.brand)\r\n                setImage(product.image)\r\n                setCategory(product.category)\r\n                setDescription(product.description)\r\n                setCountInStock(product.countInStock)\r\n    \r\n            }\r\n        }\r\n\r\n       \r\n    }, [dispatch, productId, product, navigate, successUpdate])\r\n\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(updateProduct({\r\n            _id:productId,\r\n            name:name,\r\n            price: price,\r\n            image: image,\r\n            brand: brand,\r\n            category: category,\r\n            countInStock: countInStock,\r\n            description: description\r\n        }))\r\n    }\r\n\r\n    const uploadFileHandler = async (e) => {\r\n        const file = e.target.files[0]\r\n        const formData = new FormData()\r\n\r\n        formData.append('image', file)\r\n        formData.append('product_id', productId)\r\n\r\n        setUploading(true)\r\n\r\n        try {\r\n            const config = {\r\n                headers:{\r\n                    'Content-Type':'multipart/form-data'\r\n                }\r\n            }\r\n\r\n            const {data} = await axios.post('/api/products/upload/', formData, config)\r\n\r\n            setImage(data)\r\n            setUploading(false)\r\n\r\n        }catch(error){\r\n            setUploading(false)\r\n        }\r\n    }\r\n\r\n  return (\r\n    <div>\r\n        <Link to='/admin/productlist' >Powrót</Link>\r\n        <FormContainer className=\"formcontainer\">\r\n            <h1 className=\"text-5xl text-center mb-5\">Edytuj produkt</h1>\r\n\r\n            {loadingUpdate && <Loader />}\r\n            {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n            \r\n            {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message> : (\r\n                <Form onSubmit={submitHandler}>\r\n\r\n                    <Form.Group controlId='name'>\r\n                        <Form.Label>Nazwa</Form.Label>\r\n                            <Form.Control type='name' placeholder='Wprowadź nazwę przedmiotu' value={name} onChange={(e)=>setName(e.target.value)}>\r\n                \r\n                            </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='price'>\r\n                        <Form.Label>Cena</Form.Label>\r\n                            <Form.Control type='number' placeholder='Podaj cenę' value={price} onChange={(e)=>setPrice(parseFloat(e.target.value))}>\r\n\r\n                            </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='image'>\r\n                        <Form.Label>Zdjęcie</Form.Label>\r\n                        <Form.Control type='text' placeholder='Wybierz zdjęcie' value={image} onChange={(e)=>setImage(e.target.value)}>\r\n                        </Form.Control>\r\n\r\n                        <Form.Control type='file' placeholder='Wybierz zdjęcie' onChange={uploadFileHandler}>\r\n                        </Form.Control>\r\n\r\n                        {uploading && <Loader />}\r\n\r\n                        {/* <Form.File id='image-file' label='Wybierz plik ze zdjęciem' custom onChange={uploadFileHandler} >\r\n\r\n                        </Form.File> */}\r\n\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='brand'>\r\n                        <Form.Label>Marka</Form.Label>\r\n                            <Form.Control type='text' placeholder='Wprawdź markę produktu' value={brand} onChange={(e)=>setBrand(e.target.value)}>\r\n                \r\n                            </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='countInStock'>\r\n                        <Form.Label>Ilość</Form.Label>\r\n                            <Form.Control type='number' placeholder='Wprawdź ilość' value={countInStock} onChange={(e)=>setCountInStock(e.target.value)}>\r\n                \r\n                            </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='category'>\r\n                        <Form.Label>Kategoria</Form.Label>\r\n                            <Form.Control type='text' placeholder='Wprawdź kategorię' value={category} onChange={(e)=>setCategory(e.target.value)}>\r\n                \r\n                            </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='description'>\r\n                        <Form.Label>Opis</Form.Label>\r\n                            <Form.Control as='textarea' placeholder='Dodaj opis' value={description} onChange={(e)=>setDescription(e.target.value)}>\r\n                \r\n                            </Form.Control>\r\n                    </Form.Group>\r\n\r\n                <Button type='submit' variant='primary' className=\"mt-4 login-btn\">Zapisz zmiany</Button>\r\n            </Form>\r\n            )}\r\n\r\n    </FormContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProductEditScreen\r\n","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\screens\\OrderListScreen.js",["310","311","312","313","314","315","316","317"],[],"import React, {useState, useEffect, useProps} from 'react'\r\nimport { useNavigate, useLocation} from 'react-router-dom'\r\nimport {Form, Button, Row, Col, Table} from 'react-bootstrap'\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport FormContainer from '../components/FormContainer';\r\nimport {LinkContainer} from 'react-router-bootstrap'\r\nimport {listOrders, deliverOrder} from '../actions/orderActions' \r\n\r\n\r\n\r\nfunction OrderListScreen() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const orderList = useSelector(state => state.orderList)\r\n    const {loading, error, orders} = orderList\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const {userInfo} = userLogin\r\n\r\n\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        if(userInfo && userInfo.isAdmin){\r\n            dispatch(listOrders())\r\n        }else{\r\n            navigate(`/login`)\r\n        }\r\n        \r\n    }, [dispatch, navigate, userInfo])\r\n\r\n\r\n  return (\r\n    <div>\r\n        <h1 className=\"text-4xl text-center mb-5\">Lista zamówień</h1>\r\n        {loading\r\n        ? <Loader />\r\n        : error\r\n            ?<Message varint='danger'>{error}</Message>\r\n            :(\r\n                <Table striped bordered hover responsive className=\"table-sm\">\r\n                    <thead className=\"text-center \">\r\n                        <tr>\r\n                            <th>Numer</th>\r\n                            <th>Kupujący</th>\r\n                            <th>Data</th>\r\n                            <th>Kwota</th>\r\n                            <th>Status płatności</th>\r\n                            <th>Czy dostarczone</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody className=\"text-center\">\r\n                        {orders.map(order => (\r\n                            <tr key={order._id}>\r\n                                <td>{order._id}</td>\r\n                                <td>{order.user && order.user.name}</td>\r\n                                <td>{order.createAt.substring(0, 10)}</td>\r\n                                <td>{order.totalPrice} zł</td>\r\n                                <td>{order.isPaid ? (\r\n                                    <p className=\"text-green-500\">Opłacone</p>\r\n                                ): <p className=\"text-red-500\">Nie opłacone</p>}</td>\r\n                                <td>{order.isDelivered ? (\r\n                                    <p className=\"text-green-500\">Dostarczone</p>\r\n                                ): <p className=\"text-red-500\">Nie dostaczone</p>}</td>\r\n                                \r\n                                \r\n                                <td>\r\n                                    <LinkContainer to={`/order/${order._id}`}>\r\n                                        <Button varinat='light' className=\"btn-sm\">Szczegóły</Button>\r\n                                    </LinkContainer>\r\n                                </td>\r\n\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </Table>\r\n            )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default OrderListScreen\r\n","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\components\\SearchBox.js",[],[],"C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\constants\\productConstants.js",[],[],"C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\constants\\orderConstants.js",[],[],"C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\constants\\cartConstants.js",[],[],"C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\constants\\userConstants.js",[],[],"C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\actions\\userActions.js",["318","319"],[],"import {\r\n\tUSER_LOGIN_REQUEST,\r\n\tUSER_LOGIN_SUCCESS,\r\n\tUSER_LOGIN_FAIL,\r\n\tUSER_LOGOUT,\r\n\tUSER_REGISTER_REQUEST,\r\n\tUSER_REGISTER_SUCCESS,\r\n\tUSER_REGISTER_FAIL,\r\n\tUSER_DETAILS_REQUEST,\r\n\tUSER_DETAILS_SUCCESS,\r\n\tUSER_DETAILS_FAIL,\r\n\tUSER_UPDATE_PROFILE_REQUEST,\r\n\tUSER_UPDATE_PROFILE_SUCCESS,\r\n\tUSER_UPDATE_PROFILE_FAIL,\r\n\tUSER_UPDATE_PROFILE_RESET,\r\n\tUSER_DETAILS_RESET,\r\n\tUSER_LIST_FAIL,\r\n\tUSER_LIST_REQUEST,\r\n\tUSER_LIST_SUCCESS,\r\n\tUSER_LIST_RESET,\r\n\tUSER_DELETE_FAIL,\r\n\tUSER_DELETE_REQUEST,\r\n\tUSER_DELETE_SUCCESS,\r\n\tUSER_UPDATE_FAIL,\r\n\tUSER_UPDATE_REQUEST,\r\n\tUSER_UPDATE_RESET,\r\n\tUSER_UPDATE_SUCCESS,\r\n} from '../constants/userConstants';\r\nimport axios from 'axios';\r\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants';\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_LOGIN_REQUEST,\r\n\t\t});\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-type': 'application/json',\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tconst { data } = await axios.post(\r\n\t\t\t'/api/users/login',\r\n\t\t\t{ username: email, password: password },\r\n\t\t\tconfig\r\n\t\t);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: USER_LOGIN_SUCCESS,\r\n\t\t\tpayload: data,\r\n\t\t});\r\n\r\n\t\tlocalStorage.setItem('userInfo', JSON.stringify(data));\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_LOGIN_FAIL,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.detail\r\n\t\t\t\t\t? error.response.data.detail\r\n\t\t\t\t\t: error.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n\tlocalStorage.removeItem('userInfo');\r\n\tdispatch({\r\n\t\ttype: USER_LOGOUT,\r\n\t});\r\n\tdispatch({\r\n\t\ttype: USER_DETAILS_RESET,\r\n\t});\r\n\tdispatch({\r\n\t\ttype: ORDER_LIST_MY_RESET,\r\n\t});\r\n\tdispatch({\r\n\t\ttype: USER_LIST_RESET,\r\n\t});\r\n};\r\n\r\nexport const register = (name, email, password) => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_REGISTER_REQUEST,\r\n\t\t});\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-type': 'application/json',\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tconst { data } = await axios.post(\r\n\t\t\t'/api/users/register/',\r\n\t\t\t{ name: name, email: email, password: password },\r\n\t\t\tconfig\r\n\t\t);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: USER_REGISTER_SUCCESS,\r\n\t\t\tpayload: data,\r\n\t\t});\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: USER_LOGIN_SUCCESS,\r\n\t\t\tpayload: data,\r\n\t\t});\r\n\r\n\t\tlocalStorage.setItem('userInfo', JSON.stringify(data));\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_REGISTER_FAIL,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.detail\r\n\t\t\t\t\t? error.response.data.detail\r\n\t\t\t\t\t: error.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_DETAILS_REQUEST,\r\n\t\t});\r\n\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-type': 'application/json',\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token}`,\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tconst { data } = await axios.get(`/api/users/${id}`, config);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: USER_DETAILS_SUCCESS,\r\n\t\t\tpayload: data,\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_DETAILS_FAIL,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.detail\r\n\t\t\t\t\t? error.response.data.detail\r\n\t\t\t\t\t: error.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_UPDATE_PROFILE_REQUEST,\r\n\t\t});\r\n\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-type': 'application/json',\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token}`,\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tconst { data } = await axios.put(`/api/users/profile/update`, user, config);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: USER_UPDATE_PROFILE_SUCCESS,\r\n\t\t\tpayload: data,\r\n\t\t});\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: USER_LOGIN_SUCCESS,\r\n\t\t\tpayload: data,\r\n\t\t});\r\n\r\n\t\tlocalStorage.setItem('userInfo', JSON.stringify(data));\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_UPDATE_PROFILE_FAIL,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.detail\r\n\t\t\t\t\t? error.response.data.detail\r\n\t\t\t\t\t: error.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const listUsers = () => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_LIST_REQUEST,\r\n\t\t});\r\n\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-type': 'application/json',\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token}`,\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tconst { data } = await axios.get(`/api/users`, config);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: USER_LIST_SUCCESS,\r\n\t\t\tpayload: data,\r\n\t\t});\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: USER_LIST_SUCCESS,\r\n\t\t\tpayload: data,\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_LIST_FAIL,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.detail\r\n\t\t\t\t\t? error.response.data.detail\r\n\t\t\t\t\t: error.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const deleteUser = (id) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_DELETE_REQUEST,\r\n\t\t});\r\n\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-type': 'application/json',\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token}`,\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tconst { data } = await axios.delete(`/api/users/delete/${id}`, config);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: USER_DELETE_SUCCESS,\r\n\t\t\tpayload: data,\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_DELETE_FAIL,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.detail\r\n\t\t\t\t\t? error.response.data.detail\r\n\t\t\t\t\t: error.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_UPDATE_REQUEST,\r\n\t\t});\r\n\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-type': 'application/json',\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token}`,\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tconst { data } = await axios.put(`/api/users/update/${user._id}`, user, config);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: USER_UPDATE_SUCCESS,\r\n\t\t});\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: USER_DETAILS_SUCCESS,\r\n\t\t\tpayload: data,\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_UPDATE_FAIL,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.detail\r\n\t\t\t\t\t? error.response.data.detail\r\n\t\t\t\t\t: error.message,\r\n\t\t});\r\n\t}\r\n};\r\n","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\components\\Message.js",[],[],"C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\components\\Rating.js",[],[],"C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\components\\Product.js",[],[],"C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\components\\Loader.js",[],[],"C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\components\\Paginate.js",[],[],"C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\actions\\productActions.js",["320","321","322","323"],[],"import {PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_LIST_FAIL, \r\n    PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_DETAILS_FAIL, PRODUCT_DELETE_FAIL, PRODUCT_DELETE_REQUEST, PRODUCT_DELETE_SUCCESS, PRODUCT_CREATE_FAIL, PRODUCT_CREATE_REQUEST, PRODUCT_CREATE_RESET, PRODUCT_CREATE_SUCCESS, PRODUCT_UPDATE_FAIL, PRODUCT_UPDATE_REQUEST, PRODUCT_UPDATE_RESET, PRODUCT_UPDATE_SUCCESS, PRODUCT_CREATE_REVIEW_FAIL, PRODUCT_CREATE_REVIEW_REQUEST, PRODUCT_CREATE_REVIEW_RESET, PRODUCT_CREATE_REVIEW_SUCCESS} from '../constants/productConstants'\r\nimport axios from 'axios'\r\n\r\nexport const listProducts = (keyword = '') => async (dispatch) => {\r\n    try{\r\n        dispatch({type: PRODUCT_LIST_REQUEST})\r\n        const {data} = await axios.get(`/api/products?${keyword}`)\r\n\r\n        dispatch({\r\n            type: PRODUCT_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: PRODUCT_LIST_FAIL,\r\n            payload: error.respone && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const listProductDetails = (id) => async (dispatch) => {\r\n    try{\r\n        dispatch({type: PRODUCT_DETAILS_REQUEST})\r\n        const {data} = await axios.get(`/api/products/${id}/`)\r\n\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_FAIL,\r\n            payload: error.respone && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const deleteProduct = (id) => async (dispatch, getState) => {\r\n    \r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_DELETE_REQUEST,\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo}\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization:  `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.delete(`/api/products/delete/${id}`, config)\r\n        \r\n        dispatch({\r\n            type: PRODUCT_DELETE_SUCCESS,\r\n        })\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: PRODUCT_DELETE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const createProduct = () => async (dispatch, getState) => {\r\n    \r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REQUEST,\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo}\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization:  `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.post(`/api/products/create/`, {}, config)\r\n        \r\n        dispatch({\r\n            type: PRODUCT_CREATE_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: PRODUCT_CREATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const updateProduct = (product) => async (dispatch, getState) => {\r\n    \r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_REQUEST,\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo}\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization:  `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.put(`/api/products/update/${product._id}/`, product, config)\r\n        \r\n        dispatch({\r\n            type: PRODUCT_UPDATE_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const createProductReview = (productId, review) => async (dispatch, getState) => {\r\n    \r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_REQUEST,\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo}\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization:  `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.post(`/api/products/${productId}/reviews`, review, config)\r\n        \r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\components\\FormContainer.js",[],[],"C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\actions\\cartActions.js",[],[],"C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\actions\\orderActions.js",["324","325","326"],[],"import {ORDER_CREATE_FAIL, ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS, ORDER_DETAILS_FAIL, ORDER_PAY_FAIL, ORDER_PAY_REQUEST, ORDER_PAY_SUCCESS, ORDER_PAY_RESET, ORDER_LIST_MY_FAIL, ORDER_LIST_MY_REQUEST, ORDER_LIST_MY_RESET, ORDER_LIST_MY_SUCCESS, ORDER_LIST_FAIL, ORDER_LIST_REQUEST, ORDER_LIST_SUCCESS, ORDER_DELIVERED_FAIL, ORDER_DELIVERED_REQUEST, ORDER_DELIVERED_RESET, ORDER_DELIVERED_SUCCESS} from '../constants/orderConstants'\r\nimport axios from 'axios'\r\n\r\nimport {CART_CLEAR_ITEMS} from '../constants/cartConstants'\r\n\r\n\r\n\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_CREATE_REQUEST,\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo}\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization:  `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const {data} = await axios.post(`/api/orders/add/`, order, config)\r\n\r\n        dispatch({\r\n            type: ORDER_CREATE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        dispatch({\r\n            type: CART_CLEAR_ITEMS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.removeItem('cartItems')\r\n\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: ORDER_CREATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\r\n    \r\n    try {\r\n        dispatch({\r\n            type: ORDER_DETAILS_REQUEST,\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo}\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization:  `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.get(`/api/orders/${id}`, config)\r\n        \r\n\r\n\r\n        dispatch({\r\n            type: ORDER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: ORDER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const payOrder = (id, paymentResolut) => async (dispatch, getState) => {\r\n    \r\n    try {\r\n        dispatch({\r\n            type: ORDER_PAY_REQUEST,\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo}\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization:  `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.put(`/api/orders/${id}/pay`, paymentResolut, config)\r\n        \r\n\r\n\r\n        dispatch({\r\n            type: ORDER_PAY_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: ORDER_PAY_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const listMyOrders = () => async (dispatch, getState) => {\r\n    \r\n    try {\r\n        dispatch({\r\n            type: ORDER_LIST_MY_REQUEST,\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo}\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization:  `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.get(`/api/orders/myorders/`, config)\r\n        \r\n\r\n\r\n        dispatch({\r\n            type: ORDER_LIST_MY_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: ORDER_LIST_MY_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const listOrders = () => async (dispatch, getState) => {\r\n    \r\n    try {\r\n        dispatch({\r\n            type: ORDER_LIST_REQUEST,\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo}\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization:  `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.get(`/api/orders/`, config)\r\n        \r\n\r\n\r\n        dispatch({\r\n            type: ORDER_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: ORDER_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const deliverOrder = (order) => async (dispatch, getState) => {\r\n    \r\n    try {\r\n        dispatch({\r\n            type: ORDER_DELIVERED_REQUEST,\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo}\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization:  `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.put(`/api/orders/${order._id}/deliver`, {}, config)\r\n        \r\n\r\n\r\n        dispatch({\r\n            type: ORDER_DELIVERED_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: ORDER_DELIVERED_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}","C:\\Users\\Krystian\\Documents\\GitHub\\ecommerce\\backend\\frontend\\src\\components\\CheckoutSteps.js",[],[],{"ruleId":"327","severity":1,"message":"328","line":3,"column":8,"nodeType":"329","messageId":"330","endLine":3,"endColumn":14},{"ruleId":"327","severity":1,"message":"331","line":5,"column":8,"nodeType":"329","messageId":"330","endLine":5,"endColumn":12},{"ruleId":"327","severity":1,"message":"332","line":2,"column":27,"nodeType":"329","messageId":"330","endLine":2,"endColumn":37},{"ruleId":"327","severity":1,"message":"333","line":2,"column":39,"nodeType":"329","messageId":"330","endLine":2,"endColumn":50},{"ruleId":"327","severity":1,"message":"334","line":9,"column":9,"nodeType":"329","messageId":"330","endLine":9,"endColumn":29},{"ruleId":"335","severity":1,"message":"336","line":42,"column":5,"nodeType":"337","endLine":42,"endColumn":37,"suggestions":"338"},{"ruleId":"339","severity":1,"message":"340","line":95,"column":63,"nodeType":"341","messageId":"342","endLine":95,"endColumn":77,"fix":"343"},{"ruleId":"344","severity":1,"message":"345","line":126,"column":147,"nodeType":"346","messageId":"347","endLine":126,"endColumn":149},{"ruleId":"327","severity":1,"message":"348","line":1,"column":16,"nodeType":"329","messageId":"330","endLine":1,"endColumn":24},{"ruleId":"327","severity":1,"message":"349","line":18,"column":8,"nodeType":"329","messageId":"330","endLine":18,"endColumn":16},{"ruleId":"327","severity":1,"message":"350","line":1,"column":37,"nodeType":"329","messageId":"330","endLine":1,"endColumn":45},{"ruleId":"344","severity":1,"message":"351","line":38,"column":21,"nodeType":"346","messageId":"347","endLine":38,"endColumn":23},{"ruleId":"327","severity":1,"message":"350","line":1,"column":37,"nodeType":"329","messageId":"330","endLine":1,"endColumn":45},{"ruleId":"327","severity":1,"message":"352","line":2,"column":9,"nodeType":"329","messageId":"330","endLine":2,"endColumn":13},{"ruleId":"327","severity":1,"message":"353","line":8,"column":25,"nodeType":"329","messageId":"330","endLine":8,"endColumn":33},{"ruleId":"327","severity":1,"message":"354","line":15,"column":11,"nodeType":"329","messageId":"330","endLine":15,"endColumn":19},{"ruleId":"344","severity":1,"message":"351","line":56,"column":21,"nodeType":"346","messageId":"347","endLine":56,"endColumn":23},{"ruleId":"327","severity":1,"message":"355","line":2,"column":9,"nodeType":"329","messageId":"330","endLine":2,"endColumn":14},{"ruleId":"327","severity":1,"message":"356","line":7,"column":8,"nodeType":"329","messageId":"330","endLine":7,"endColumn":19},{"ruleId":"327","severity":1,"message":"357","line":8,"column":8,"nodeType":"329","messageId":"330","endLine":8,"endColumn":13},{"ruleId":"327","severity":1,"message":"350","line":1,"column":37,"nodeType":"329","messageId":"330","endLine":1,"endColumn":45},{"ruleId":"327","severity":1,"message":"358","line":1,"column":26,"nodeType":"329","messageId":"330","endLine":1,"endColumn":35},{"ruleId":"327","severity":1,"message":"350","line":1,"column":37,"nodeType":"329","messageId":"330","endLine":1,"endColumn":45},{"ruleId":"327","severity":1,"message":"352","line":2,"column":9,"nodeType":"329","messageId":"330","endLine":2,"endColumn":13},{"ruleId":"327","severity":1,"message":"359","line":3,"column":23,"nodeType":"329","messageId":"330","endLine":3,"endColumn":26},{"ruleId":"327","severity":1,"message":"360","line":3,"column":28,"nodeType":"329","messageId":"330","endLine":3,"endColumn":31},{"ruleId":"327","severity":1,"message":"361","line":4,"column":8,"nodeType":"329","messageId":"330","endLine":4,"endColumn":14},{"ruleId":"327","severity":1,"message":"362","line":5,"column":8,"nodeType":"329","messageId":"330","endLine":5,"endColumn":15},{"ruleId":"327","severity":1,"message":"353","line":7,"column":9,"nodeType":"329","messageId":"330","endLine":7,"endColumn":17},{"ruleId":"327","severity":1,"message":"354","line":15,"column":11,"nodeType":"329","messageId":"330","endLine":15,"endColumn":19},{"ruleId":"327","severity":1,"message":"358","line":1,"column":26,"nodeType":"329","messageId":"330","endLine":1,"endColumn":35},{"ruleId":"327","severity":1,"message":"350","line":1,"column":37,"nodeType":"329","messageId":"330","endLine":1,"endColumn":45},{"ruleId":"327","severity":1,"message":"352","line":2,"column":9,"nodeType":"329","messageId":"330","endLine":2,"endColumn":13},{"ruleId":"327","severity":1,"message":"359","line":3,"column":23,"nodeType":"329","messageId":"330","endLine":3,"endColumn":26},{"ruleId":"327","severity":1,"message":"361","line":4,"column":8,"nodeType":"329","messageId":"330","endLine":4,"endColumn":14},{"ruleId":"327","severity":1,"message":"362","line":5,"column":8,"nodeType":"329","messageId":"330","endLine":5,"endColumn":15},{"ruleId":"327","severity":1,"message":"353","line":7,"column":9,"nodeType":"329","messageId":"330","endLine":7,"endColumn":17},{"ruleId":"327","severity":1,"message":"363","line":9,"column":9,"nodeType":"329","messageId":"330","endLine":9,"endColumn":28},{"ruleId":"327","severity":1,"message":"354","line":17,"column":11,"nodeType":"329","messageId":"330","endLine":17,"endColumn":19},{"ruleId":"327","severity":1,"message":"348","line":1,"column":16,"nodeType":"329","messageId":"330","endLine":1,"endColumn":24},{"ruleId":"327","severity":1,"message":"350","line":1,"column":37,"nodeType":"329","messageId":"330","endLine":1,"endColumn":45},{"ruleId":"327","severity":1,"message":"331","line":3,"column":9,"nodeType":"329","messageId":"330","endLine":3,"endColumn":13},{"ruleId":"327","severity":1,"message":"361","line":4,"column":8,"nodeType":"329","messageId":"330","endLine":4,"endColumn":14},{"ruleId":"327","severity":1,"message":"353","line":7,"column":9,"nodeType":"329","messageId":"330","endLine":7,"endColumn":17},{"ruleId":"327","severity":1,"message":"364","line":8,"column":8,"nodeType":"329","messageId":"330","endLine":8,"endColumn":21},{"ruleId":"327","severity":1,"message":"363","line":9,"column":9,"nodeType":"329","messageId":"330","endLine":9,"endColumn":28},{"ruleId":"327","severity":1,"message":"354","line":19,"column":11,"nodeType":"329","messageId":"330","endLine":19,"endColumn":19},{"ruleId":"335","severity":1,"message":"365","line":39,"column":8,"nodeType":"337","endLine":39,"endColumn":27,"suggestions":"366"},{"ruleId":"327","severity":1,"message":"348","line":1,"column":16,"nodeType":"329","messageId":"330","endLine":1,"endColumn":24},{"ruleId":"327","severity":1,"message":"350","line":1,"column":37,"nodeType":"329","messageId":"330","endLine":1,"endColumn":45},{"ruleId":"327","severity":1,"message":"331","line":3,"column":9,"nodeType":"329","messageId":"330","endLine":3,"endColumn":13},{"ruleId":"327","severity":1,"message":"353","line":7,"column":9,"nodeType":"329","messageId":"330","endLine":7,"endColumn":17},{"ruleId":"327","severity":1,"message":"364","line":8,"column":8,"nodeType":"329","messageId":"330","endLine":8,"endColumn":21},{"ruleId":"327","severity":1,"message":"367","line":9,"column":8,"nodeType":"329","messageId":"330","endLine":9,"endColumn":21},{"ruleId":"327","severity":1,"message":"368","line":11,"column":10,"nodeType":"329","messageId":"330","endLine":11,"endColumn":28},{"ruleId":"327","severity":1,"message":"354","line":29,"column":11,"nodeType":"329","messageId":"330","endLine":29,"endColumn":19},{"ruleId":"335","severity":1,"message":"369","line":48,"column":8,"nodeType":"337","endLine":48,"endColumn":62,"suggestions":"370"},{"ruleId":"327","severity":1,"message":"348","line":1,"column":16,"nodeType":"329","messageId":"330","endLine":1,"endColumn":24},{"ruleId":"327","severity":1,"message":"350","line":1,"column":37,"nodeType":"329","messageId":"330","endLine":1,"endColumn":45},{"ruleId":"327","severity":1,"message":"333","line":2,"column":23,"nodeType":"329","messageId":"330","endLine":2,"endColumn":34},{"ruleId":"327","severity":1,"message":"331","line":3,"column":9,"nodeType":"329","messageId":"330","endLine":3,"endColumn":13},{"ruleId":"327","severity":1,"message":"359","line":3,"column":23,"nodeType":"329","messageId":"330","endLine":3,"endColumn":26},{"ruleId":"327","severity":1,"message":"360","line":3,"column":28,"nodeType":"329","messageId":"330","endLine":3,"endColumn":31},{"ruleId":"327","severity":1,"message":"364","line":7,"column":8,"nodeType":"329","messageId":"330","endLine":7,"endColumn":21},{"ruleId":"335","severity":1,"message":"369","line":35,"column":8,"nodeType":"337","endLine":35,"endColumn":43,"suggestions":"371"},{"ruleId":"327","severity":1,"message":"350","line":1,"column":37,"nodeType":"329","messageId":"330","endLine":1,"endColumn":45},{"ruleId":"327","severity":1,"message":"333","line":2,"column":28,"nodeType":"329","messageId":"330","endLine":2,"endColumn":39},{"ruleId":"327","severity":1,"message":"359","line":3,"column":23,"nodeType":"329","messageId":"330","endLine":3,"endColumn":26},{"ruleId":"327","severity":1,"message":"360","line":3,"column":28,"nodeType":"329","messageId":"330","endLine":3,"endColumn":31},{"ruleId":"335","severity":1,"message":"372","line":43,"column":8,"nodeType":"337","endLine":43,"endColumn":47,"suggestions":"373"},{"ruleId":"327","severity":1,"message":"348","line":1,"column":16,"nodeType":"329","messageId":"330","endLine":1,"endColumn":24},{"ruleId":"327","severity":1,"message":"350","line":1,"column":37,"nodeType":"329","messageId":"330","endLine":1,"endColumn":45},{"ruleId":"327","severity":1,"message":"331","line":3,"column":9,"nodeType":"329","messageId":"330","endLine":3,"endColumn":13},{"ruleId":"327","severity":1,"message":"364","line":7,"column":8,"nodeType":"329","messageId":"330","endLine":7,"endColumn":21},{"ruleId":"327","severity":1,"message":"374","line":8,"column":9,"nodeType":"329","messageId":"330","endLine":8,"endColumn":18},{"ruleId":"327","severity":1,"message":"375","line":8,"column":20,"nodeType":"329","messageId":"330","endLine":8,"endColumn":30},{"ruleId":"327","severity":1,"message":"376","line":15,"column":13,"nodeType":"329","messageId":"330","endLine":15,"endColumn":15},{"ruleId":"335","severity":1,"message":"377","line":51,"column":8,"nodeType":"337","endLine":51,"endColumn":77,"suggestions":"378"},{"ruleId":"327","severity":1,"message":"350","line":1,"column":37,"nodeType":"329","messageId":"330","endLine":1,"endColumn":45},{"ruleId":"327","severity":1,"message":"333","line":3,"column":28,"nodeType":"329","messageId":"330","endLine":3,"endColumn":39},{"ruleId":"327","severity":1,"message":"359","line":4,"column":23,"nodeType":"329","messageId":"330","endLine":4,"endColumn":26},{"ruleId":"327","severity":1,"message":"360","line":4,"column":28,"nodeType":"329","messageId":"330","endLine":4,"endColumn":31},{"ruleId":"327","severity":1,"message":"379","line":8,"column":30,"nodeType":"329","messageId":"330","endLine":8,"endColumn":43},{"ruleId":"327","severity":1,"message":"380","line":10,"column":9,"nodeType":"329","messageId":"330","endLine":10,"endColumn":26},{"ruleId":"327","severity":1,"message":"348","line":1,"column":16,"nodeType":"329","messageId":"330","endLine":1,"endColumn":24},{"ruleId":"327","severity":1,"message":"350","line":1,"column":37,"nodeType":"329","messageId":"330","endLine":1,"endColumn":45},{"ruleId":"327","severity":1,"message":"333","line":2,"column":23,"nodeType":"329","messageId":"330","endLine":2,"endColumn":34},{"ruleId":"327","severity":1,"message":"331","line":3,"column":9,"nodeType":"329","messageId":"330","endLine":3,"endColumn":13},{"ruleId":"327","severity":1,"message":"359","line":3,"column":23,"nodeType":"329","messageId":"330","endLine":3,"endColumn":26},{"ruleId":"327","severity":1,"message":"360","line":3,"column":28,"nodeType":"329","messageId":"330","endLine":3,"endColumn":31},{"ruleId":"327","severity":1,"message":"364","line":7,"column":8,"nodeType":"329","messageId":"330","endLine":7,"endColumn":21},{"ruleId":"327","severity":1,"message":"381","line":9,"column":21,"nodeType":"329","messageId":"330","endLine":9,"endColumn":33},{"ruleId":"327","severity":1,"message":"382","line":15,"column":2,"nodeType":"329","messageId":"330","endLine":15,"endColumn":27},{"ruleId":"327","severity":1,"message":"380","line":26,"column":2,"nodeType":"329","messageId":"330","endLine":26,"endColumn":19},{"ruleId":"327","severity":1,"message":"334","line":2,"column":191,"nodeType":"329","messageId":"330","endLine":2,"endColumn":211},{"ruleId":"327","severity":1,"message":"383","line":2,"column":282,"nodeType":"329","messageId":"330","endLine":2,"endColumn":302},{"ruleId":"327","severity":1,"message":"384","line":2,"column":387,"nodeType":"329","messageId":"330","endLine":2,"endColumn":414},{"ruleId":"327","severity":1,"message":"385","line":66,"column":16,"nodeType":"329","messageId":"330","endLine":66,"endColumn":20},{"ruleId":"327","severity":1,"message":"386","line":1,"column":192,"nodeType":"329","messageId":"330","endLine":1,"endColumn":207},{"ruleId":"327","severity":1,"message":"387","line":1,"column":252,"nodeType":"329","messageId":"330","endLine":1,"endColumn":271},{"ruleId":"327","severity":1,"message":"388","line":1,"column":400,"nodeType":"329","messageId":"330","endLine":1,"endColumn":421},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.","'useHistory' is defined but never used.","'useLocation' is defined but never used.","'PRODUCT_CREATE_RESET' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["389"],"no-whitespace-before-property","Unexpected whitespace before property price.","MemberExpression","unexpectedWhitespace",{"range":"390","text":"391"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'navigate' is assigned a value but never used.","'useProps' is defined but never used.","Expected '!==' and instead saw '!='.","'Link' is defined but never used.","'register' is defined but never used.","'location' is assigned a value but never used.","'Route' is defined but never used.","'queryString' is defined but never used.","'axios' is defined but never used.","'useEffect' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Loader' is defined but never used.","'Message' is defined but never used.","'saveShippingAddress' is defined but never used.","'FormContainer' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'order._id'. Either include them or remove the dependency array.",["392"],"'CheckoutSteps' is defined but never used.","'ORDER_CREATE_RESET' is defined but never used.","React Hook useEffect has a missing dependency: 'userInfo'. Either include it or remove the dependency array.",["393"],["394"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["395"],"'listUsers' is defined but never used.","'deleteUser' is defined but never used.","'id' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'createdProduct._id'. Either include it or remove the dependency array.",["396"],"'createProduct' is defined but never used.","'USER_UPDATE_RESET' is defined but never used.","'deliverOrder' is defined but never used.","'USER_UPDATE_PROFILE_RESET' is defined but never used.","'PRODUCT_UPDATE_RESET' is defined but never used.","'PRODUCT_CREATE_REVIEW_RESET' is defined but never used.","'data' is assigned a value but never used.","'ORDER_PAY_RESET' is defined but never used.","'ORDER_LIST_MY_RESET' is defined but never used.","'ORDER_DELIVERED_RESET' is defined but never used.",{"desc":"397","fix":"398"},[3638,3640],".",{"desc":"399","fix":"400"},{"desc":"401","fix":"402"},{"desc":"403","fix":"404"},{"desc":"405","fix":"406"},{"desc":"407","fix":"408"},"Update the dependencies array to be: [dispatch, id, successProductReview]",{"range":"409","text":"410"},"Update the dependencies array to be: [success, navigate, order._id, dispatch]",{"range":"411","text":"412"},"Update the dependencies array to be: [dispatch, order, orderId, successDelivered, navigate, userInfo]",{"range":"413","text":"414"},"Update the dependencies array to be: [dispatch, navigate, successDelete, userInfo]",{"range":"415","text":"416"},"Update the dependencies array to be: [userId, user, successUpdate, navigate, dispatch]",{"range":"417","text":"418"},"Update the dependencies array to be: [dispatch, navigate, userInfo, successDelete, successCreate, keyword, createdProduct._id]",{"range":"419","text":"420"},[1521,1553],"[dispatch, id, successProductReview]",[1596,1615],"[success, navigate, order._id, dispatch]",[1738,1792],"[dispatch, order, orderId, successDelivered, navigate, userInfo]",[1109,1144],"[dispatch, navigate, successDelete, userInfo]",[1560,1599],"[userId, user, successUpdate, navigate, dispatch]",[1861,1930],"[dispatch, navigate, userInfo, successDelete, successCreate, keyword, createdProduct._id]"]